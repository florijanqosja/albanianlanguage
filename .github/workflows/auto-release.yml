name: Auto Release on Merge

on:
  push:
    branches:
      - main

jobs:
  auto-release:
    runs-on: ubuntu-latest
    # Skip if commit message contains [no-release]
    if: "!contains(github.event.head_commit.message, '[no-release]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(grep -o "__version__ = \"[0-9]*\.[0-9]*\.[0-9]*\"" albanianlanguage/__version__.py | cut -d'"' -f2)
        echo "Current version: $CURRENT_VERSION"
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
    
    - name: Determine new version
      id: new_version
      run: |
        CURRENT=${{ steps.current_version.outputs.current_version }}
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment patch version
        PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version in code
      run: |
        NEW_VERSION=${{ steps.new_version.outputs.new_version }}
        sed -i "s/__version__ = \"[0-9]*\.[0-9]*\.[0-9]*\"/__version__ = \"$NEW_VERSION\"/" albanianlanguage/__version__.py
    
    - name: Run tests
      run: |
        pip install -e .
        pip install -r requirements-dev.txt
        pytest
    
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add albanianlanguage/__version__.py
        git commit -m "Bump version to ${{ steps.new_version.outputs.new_version }} [no-release]"
    
    - name: Create Tag
      run: |
        git tag v${{ steps.new_version.outputs.new_version }}
    
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main
        tags: true
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.new_version.outputs.new_version }}
        release_name: Release v${{ steps.new_version.outputs.new_version }}
        body: |
          Automated release v${{ steps.new_version.outputs.new_version }}
        draft: false
        prerelease: false
    
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m build
        twine upload dist/* 